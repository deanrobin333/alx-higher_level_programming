# 2-matrix_divided.txt

===============================
doctest for 2-matrix_divided.py
===============================

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

Importing module dynamically
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Quotients are rounded to a maximum of two decimal places
and original matrix is left unchanged
    >>> matrix = [[3, 7, 9], [5, 9, 11]]
    >>> matrix_divided(matrix, 3)
    [[1.0, 2.33, 3.0], [1.67, 3.0, 3.67]]

    >>> print(matrix)
    [[3, 7, 9], [5, 9, 11]]

Dividing by positive integer or negative integer
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 5)
    [[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, -5)
    [[-0.2, -0.4, -0.6], [-0.8, -1.0, -1.2]]

Dividing by positive or negative floats
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3.3)
    [[0.3, 0.61, 0.91], [1.21, 1.52, 1.82]]

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, -3.3)
    [[-0.3, -0.61, -0.91], [-1.21, -1.52, -1.82]]

Dividing by a boolean - True represents 1, False represents 0
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, True)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, False)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Matrix with mix of integers and floats
    >>> matrix = [[3, -2.2, 9], [-6.6, 7.33, 8]]
    >>> matrix_divided(matrix, 3)
    [[1.0, -0.73, 3.0], [-2.2, 2.44, 2.67]]


Invalid matrices
=================
The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

Not a list && an empty list && a single list
    >>> matrix = "a string"
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = []
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [1, 2, 3]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

An empty list of list will succeed
    >>> matrix = [[]]
    >>> matrix_divided(matrix, 3)
    [[]]

if all elements are not ``int`` or ``float`` && row of different sizes
    >>> matrix = [[1, 2, 3], [1, "not an int", 3]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[1.3, 2.4, 4.6], [2.3, "not a float", 3.3]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix = [[1, 2, 3], [1, 2, 3, 4]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size


Invalid Divisors
================
Dividing by zero
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Dividing by a string.
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, "1")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Dividing by None.
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Dividing by a various types.
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, [1, 2])
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
