# 3-say_my_name.txt
# The ``3-say_my_name`` module
============================================
How to use 3-say_my_name.py
============================================

This modules defines a function ``say_my_name(first_name, last_name="")``
This library has one function called ``say_my_name()``

Usage
=====
``say_my_name(...)`` prints "My name is <first_name> <last_name>".

Importing the function say_my_name.
    >>> say_my_name = __import__('3-say_my_name').say_my_name

Passing first_name and last_name correctly.
    >>> say_my_name("Dean", "Otsyeno")
    My name is Dean Otsyeno

    >> say_my_name("Dynofin")
    My name is Dynofin

Passing last_name as None.
    >>> say_my_name("Dean", None)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Passing first_name and last_name as None.
    >>> say_my_name(None, None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Passing first name as None.
    >>> say_my_name(None, "Dynofin")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Passing wrong types as first_name and last_name
    >>> say_my_name(50, "Cent")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name("Jane", [4])
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Passing more than two arguments to say_my_name().
    ``#doctest: +ELLIPSIS`` - tells doctest to ignore variable parts of the expected output
    >>> say_my_name("Jennifer", "Jaylo", "Lopez") #doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments ...
